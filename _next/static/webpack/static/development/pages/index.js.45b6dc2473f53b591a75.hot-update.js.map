{"version":3,"file":"static/webpack/static/development/pages/index.js.45b6dc2473f53b591a75.hot-update.js","sources":["webpack:///./components/Map.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { geoEquirectangular, geoPath } from \"d3-geo\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport fetch from \"isomorphic-unfetch\";\n\n// https://codesandbox.io/s/creating-visualizations-with-d3-and-react-3ofdx\nimport distance from \"./distance\";\n\nconst projection = geoEquirectangular();\n\nclass Map extends React.Component {\n  componentDidMount() {\n    const {\n      marker,\n      onSubmit,\n      userClickCoordinations,\n      randomPlaceCoordinations,\n      scoreData\n    } = this.props;\n    const map = d3.select(\"#map\");\n    // First create the world\n    fetch(\n      `${\n        process.env.NODE_ENV !== \"development\" ? \"/frontend-data/\" : \"/\"\n      }static/custom.geo.json`\n    ).then(response => {\n      if (response.status !== 200) {\n        console.log(`There was a problem: ${response.status}`);\n        return;\n      }\n      response.json().then(worlddata => {\n        map\n          .append(\"g\")\n          .selectAll(\"path\")\n          .data(feature(worlddata, worlddata.objects.countries).features)\n          .enter()\n          .append(\"path\")\n          .attr(\"d\", d => geoPath().projection(projection)(d))\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", \"0.2\")\n          .attr(\"id\", d => d.properties.name);\n\n        // const colour = d3\n        //   .scaleLinear()\n        //   .domain([d3.min(Object.keys(data), d => data[d].count), 500])\n        //   .clamp(true)\n        //   .range([\"lightgrey\", \"red\"]);\n\n        map.append(\"g\").attr(\"id\", \"markers\");\n\n        this.drawMarker(marker);\n        map.on(\"click\", () => this.handleClick());\n      });\n    });\n  }\n\n  handleClick() {\n    const map = d3.select(\"#map\");\n    const { marker, onSubmit } = this.props;\n    // Fill color of clicked country depending on answer\n    const clickedCountry = d3.select(d3.event.target);\n    const userGuessedCountry =\n      clickedCountry.attr(\"id\") === marker[0].landLabel.value;\n\n    if (userGuessedCountry) {\n      // Correct country was selected\n      clickedCountry.attr(\"fill\", \"green\");\n    } else {\n      clickedCountry.attr(\"fill\", \"red\");\n      d3.select(`#${marker[0].landLabel.value}`).attr(\"fill\", \"green\");\n    }\n\n    // Use clientPoint to check where user clicked and invert it againt projection\n    // https://stackoverflow.com/questions/48083536/react-v16-d3-v4-when-using-mouse-from-d3-selection-will-get-typeerror-cannot\n    const userClickCoordinations = projection.invert(\n      d3.clientPoint(d3.event.target, d3.event)\n    );\n    const randomPlaceCoordinations = projection.invert([\n      d3.select(\"#randomplace\").attr(\"cx\"),\n      d3.select(\"#randomplace\").attr(\"cy\")\n    ]);\n\n    // Drawing line between coordinates of mouseclick and the marker randomly fetched from server\n    // https://stackoverflow.com/questions/43945356/drawing-line-between-two-projected-points-on-map-no-line-showing-d3-js\n    map\n      .select(\"#markers\")\n      .data(userClickCoordinations)\n      .insert(\"line\", \"#randomplace\")\n      .attr(\n        \"x1\",\n        projection([\n          Number(userClickCoordinations[0]),\n          Number(userClickCoordinations[1])\n        ])[0]\n      )\n      .attr(\n        \"y1\",\n        projection([\n          Number(userClickCoordinations[0]),\n          Number(userClickCoordinations[1])\n        ])[1]\n      )\n      .attr(\n        \"x2\",\n        projection([\n          Number(randomPlaceCoordinations[0]),\n          Number(randomPlaceCoordinations[1])\n        ])[0]\n      )\n      .attr(\n        \"y2\",\n        projection([\n          Number(randomPlaceCoordinations[0]),\n          Number(randomPlaceCoordinations[1])\n        ])[1]\n      )\n      .attr(\"stroke\", \"blue\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"fill\", \"none\");\n\n    this.drawMarker([\n      {\n        id: \"answer\",\n        lat: userClickCoordinations[0],\n        long: userClickCoordinations[1]\n      }\n    ]);\n    // Also add marker on top of where user pressed\n    // map\n    //   .select(\"#markers\")\n    //   .append(\"circle\")\n    //   .attr(\"id\", \"answer\")\n    //   .attr(\"fill\", \"blue\")\n    //   .attr(\"stroke-width\", 2 / 2)\n    //   .attr(\"stroke\", \"white\")\n    //   .attr(\n    //     \"cx\",\n    //     projection([\n    //       Number(userClickCoordinations[0]),\n    //       Number(userClickCoordinations[1])\n    //     ])[0]\n    //   )\n    //   .attr(\n    //     \"cy\",\n    //     projection([\n    //       Number(userClickCoordinations[0]),\n    //       Number(userClickCoordinations[1])\n    //     ])[1]\n    //   )\n    //   .attr(\"r\", 2);\n\n    return onSubmit({\n      cho: marker[0].cho.value.split(\"/\")[\n        marker[0].cho.value.split(\"/\").length - 1\n      ],\n      finished: true,\n      userClickCoordinations,\n      randomPlaceCoordinations,\n      correctCountry: marker[0].landLabel.value,\n      guessedCountry: d3.select(d3.event.target).attr(\"id\"),\n      distance: distance(\n        userClickCoordinations[0],\n        userClickCoordinations[1],\n        randomPlaceCoordinations[0],\n        randomPlaceCoordinations[1],\n        \"M\"\n      ),\n      userGuessedCountry\n    });\n  }\n\n  drawMarker(marker) {\n    console.log(marker, \"MAR\");\n    d3.select(\"#markers\")\n      .enter()\n      .append(\"circle\")\n      .attr(\"id\", \"TEST\");\n    d3.select(\"#markers\")\n      .selectAll(\"circle\")\n      .data(marker)\n      .enter()\n      .append(\"circle\")\n      .attr(\"id\", ({ id }) => (!id ? \"randomplace\" : id))\n      .attr(\n        \"cx\",\n        ({ id, long, lat }) =>\n          projection([\n            Number(id ? long : long.value),\n            Number(id ? lat : lat.value)\n          ])[0]\n      )\n      .attr(\n        \"cy\",\n        ({ id, long, lat }) =>\n          projection([\n            Number(id ? long : long.value),\n            Number(id ? lat : lat.value)\n          ])[1]\n      )\n      .attr(\"r\", 2)\n      .attr(\"fill\", ({ id }) => (!id ? \"green\" : \"blue\"))\n      .attr(\"opacity\", ({ id }) => (!id ? 1 : 0))\n      .attr(\"stroke-width\", 2 / 2)\n      .attr(\"stroke\", \"white\");\n  }\n\n  resetMap() {\n    d3.select(\"#markers\")\n      .selectAll(\"*\")\n      .remove();\n    d3.selectAll(\"path\").attr(\"fill\", \"black\");\n    d3.select(\"#map\").on(\"click\", () => this.handleClick());\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.data.distance === null && nextProps.data.submitted) {\n      this.resetMap();\n      this.drawMarker(nextProps.marker);\n      return true;\n    } else if (nextProps.comparingScores) {\n      this.drawMarker(nextProps.scoreData);\n\n      d3.selectAll(\"circle\").attr(\"opacity\", 1);\n      return false;\n    } else if (nextProps.data.finished) {\n      d3.select(\"#randomplace\").attr(\"opacity\", 1);\n      d3.select(\"#map\").on(\"click\", null);\n      return false;\n    }\n\n    return false;\n  }\n\n  render() {\n    return <></>;\n  }\n}\n\nMap.propTypes = {\n  onSubmit: PropTypes.func,\n  marker: PropTypes.shape\n};\n\nexport default Map;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAGA;AAMA;AACA;AAAA;AAoCA;AAEA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAOA;AAhBA;AAkBA;;;AAEA;AACA;AACA;AAIA;AAKA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAjOA;AACA;AAmOA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}