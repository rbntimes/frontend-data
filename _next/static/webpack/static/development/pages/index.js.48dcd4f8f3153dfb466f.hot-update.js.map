{"version":3,"file":"static/webpack/static/development/pages/index.js.48dcd4f8f3153dfb466f.hot-update.js","sources":["webpack:///./components/ZoomContainer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { useSvg } from \"./stage\";\nimport { geoEquirectangular, geoPath, geoBounds } from \"d3-geo\";\nimport { path } from \"d3-path\";\nconst projection = geoEquirectangular();\nconst d3Path = geoPath().projection(projection);\nexport function ZoomContainer({ comparingScores, children, data, finished }) {\n  const svgElement = useSvg();\n  const projection = geoEquirectangular();\n  const [{ x, y, k }, setTransform] = useState({ x: 0, y: 0, k: 1 });\n\n  if (data.distance && !comparingScores) {\n    var width = 900,\n      height = 500;\n\n    const line = d3.select(\"line\");\n\n    const coords = [\n        [Number(line.attr(\"x1\")), Number(line.attr(\"y1\"))],\n        [Number(line.attr(\"x2\")), Number(line.attr(\"y2\"))]\n      ],\n      dx = coords[1][0] - coords[0][0],\n      dy = coords[1][1] - coords[0][1],\n      xx = (coords[0][0] + coords[1][0]) / 2,\n      yy = (coords[0][1] + coords[1][1]) / 2,\n      scaleArray = [3, 0.9 / Math.max(dx / width, dy / height)],\n      scale = Math.min.apply(\n        null,\n        scaleArray.filter(number => number > 0)\n      ),\n      translate = [width / 2 - scale * xx, height / 2 - scale * yy];\n\n    d3.select(\"#map\")\n      .transition(750)\n      .attr(\"transform\", \"translate(\" + translate + \")scale(\" + scale + \")\");\n\n    line.style(\"stroke-width\", Math.max(scale, 1) + \"px\");\n    d3.selectAll(\"circle\")\n      .style(\"stroke-width\", Math.max(scale, 1) + \"px\")\n      .attr(\"r\", Math.max(scale, 1));\n  }\n\n  // if (comparingScores) {\n  //   d3.select(\"#map\")\n  //     .transition(750)\n  //     .attr(\"transform\", \"translate(0, 0) scale(1)\");\n  // }\n\n  useEffect(() => {\n    if (!svgElement || (finished && !comparingScores)) return;\n    const selection = d3.select(svgElement);\n\n    const zoom = d3.zoom().on(\"zoom\", function() {\n      setTransform(d3.event.transform);\n    });\n    selection.call(zoom);\n    return () => selection.on(\".zoom\", null);\n  }, [comparingScores, finished, projection, svgElement]);\n\n  return (\n    <g id=\"map\" transform={`translate(${x}, ${y}) scale(${k})`}>\n      {children}\n    </g>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAGA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAXA;AAeA;AAIA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;A","sourceRoot":""}