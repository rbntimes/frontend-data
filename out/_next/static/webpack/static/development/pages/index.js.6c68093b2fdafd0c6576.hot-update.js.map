{"version":3,"file":"static/webpack/static/development/pages/index.js.6c68093b2fdafd0c6576.hot-update.js","sources":["webpack:///./components/WorldMap.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst cities = [\n  { name: \"Tokyo\", coordinates: [139.6917, 35.6895], population: 37843000 },\n  { name: \"Jakarta\", coordinates: [106.865, -6.1751], population: 30539000 },\n  { name: \"Delhi\", coordinates: [77.1025, 28.7041], population: 24998000 },\n  { name: \"Manila\", coordinates: [120.9842, 14.5995], population: 24123000 },\n  { name: \"Seoul\", coordinates: [126.978, 37.5665], population: 23480000 },\n  { name: \"Shanghai\", coordinates: [121.4737, 31.2304], population: 23416000 },\n  { name: \"Karachi\", coordinates: [67.0099, 24.8615], population: 22123000 },\n  { name: \"Beijing\", coordinates: [116.4074, 39.9042], population: 21009000 },\n  { name: \"New York\", coordinates: [-74.0059, 40.7128], population: 20630000 },\n  { name: \"Guangzhou\", coordinates: [113.2644, 23.1291], population: 20597000 },\n  {\n    name: \"Sao Paulo\",\n    coordinates: [-46.6333, -23.5505],\n    population: 20365000\n  },\n  {\n    name: \"Mexico City\",\n    coordinates: [-99.1332, 19.4326],\n    population: 20063000\n  },\n  { name: \"Mumbai\", coordinates: [72.8777, 19.076], population: 17712000 },\n  { name: \"Osaka\", coordinates: [135.5022, 34.6937], population: 17444000 },\n  { name: \"Moscow\", coordinates: [37.6173, 55.7558], population: 16170000 },\n  { name: \"Dhaka\", coordinates: [90.4125, 23.8103], population: 15669000 },\n  {\n    name: \"Greater Cairo\",\n    coordinates: [31.2357, 30.0444],\n    population: 15600000\n  },\n  {\n    name: \"Los Angeles\",\n    coordinates: [-118.2437, 34.0522],\n    population: 15058000\n  },\n  { name: \"Bangkok\", coordinates: [100.5018, 13.7563], population: 14998000 },\n  { name: \"Kolkata\", coordinates: [88.3639, 22.5726], population: 14667000 },\n  {\n    name: \"Buenos Aires\",\n    coordinates: [-58.3816, -34.6037],\n    population: 14122000\n  },\n  { name: \"Tehran\", coordinates: [51.389, 35.6892], population: 13532000 },\n  { name: \"Istanbul\", coordinates: [28.9784, 41.0082], population: 13287000 },\n  { name: \"Lagos\", coordinates: [3.3792, 6.5244], population: 13123000 },\n  { name: \"Shenzhen\", coordinates: [114.0579, 22.5431], population: 12084000 },\n  {\n    name: \"Rio de Janeiro\",\n    coordinates: [-43.1729, -22.9068],\n    population: 11727000\n  },\n  { name: \"Kinshasa\", coordinates: [15.2663, -4.4419], population: 11587000 },\n  { name: \"Tianjin\", coordinates: [117.3616, 39.3434], population: 10920000 },\n  { name: \"Paris\", coordinates: [2.3522, 48.8566], population: 10858000 },\n  { name: \"Lima\", coordinates: [-77.0428, -12.0464], population: 10750000 }\n];\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([800 / 2, 450 / 2]);\n\nconst WorldMap = () => {\n  const [geographies, setGeographies] = useState([]);\n  const [beeldmateriaal, setBeeldmateriaal] = useState([]);\n  const [marker, showMarker] = useState({});\n\n  useEffect(() => {\n    fetch(\"/static/custom.geo.json\").then(response => {\n      if (response.status !== 200) {\n        console.log(`There was a problem: ${response.status}`);\n        return;\n      }\n      response.json().then(worlddata => {\n        setGeographies(\n          feature(worlddata, worlddata.objects.countries).features\n        );\n      });\n    });\n  }, []);\n\n  const handleCountryClick = countryIndex => {\n    console.log(\"Clicked on country: \", geographies[countryIndex]);\n    fetch(`/api/country?county=${geographies[countryIndex].properties.name}`)\n      .then(data => data.json())\n      .then(({ results }) => setBeeldmateriaal(results.bindings));\n  };\n\n  const handleMarkerClick = marker => {\n    showMarker({ name: marker.placeName.value, src: marker.imageLink.value });\n  };\n  console.log(beeldmateriaal, marker);\n  return (\n    <div className=\"container\">\n      <svg width={800} height={450} viewBox=\"0 0 800 450\">\n        <g className=\"countries\">\n          {geographies.map((d, i) => (\n            <path\n              key={`path-${i}`}\n              d={geoPath().projection(projection)(d)}\n              className=\"country\"\n              fill={`rgba(38,50,56,${(1 / geographies.length) * i})`}\n              stroke=\"#FFFFFF\"\n              strokeWidth={0.5}\n              onClick={() => handleCountryClick(i)}\n            />\n          ))}\n        </g>\n        <g className=\"markers\">\n          {beeldmateriaal &&\n            beeldmateriaal.map((beeld, i) => (\n              <circle\n                key={`marker-${i}`}\n                cx={\n                  projection([\n                    Number(beeld.long.value),\n                    Number(beeld.lat.value)\n                  ])[0]\n                }\n                cy={\n                  projection([\n                    Number(beeld.long.value),\n                    Number(beeld.lat.value)\n                  ])[1]\n                }\n                r={17712000 / 3000000}\n                fill=\"#E91E63\"\n                stroke=\"#FFFFFF\"\n                className=\"marker\"\n                onClick={() => handleMarkerClick(beeld)}\n              />\n            ))}\n        </g>\n      </svg>\n      <img {...marker} />\n      <style jsx>{`\n        .container {\n          display: flex;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default WorldMap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAMA;AAMA;AACA;AACA;AAEA;AAAA;AAAA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzCA;AAAA;AAAA;AAiDA;AACA;AACA;;;;A","sourceRoot":""}